- hosts: master
  remote_user: root
  vars:
      # FQDN of the server, keep localhost if you are only going to use this
      # locally
      hostname: localhost
  tasks:
      # Initialization
      - name: disable selinux
        selinux: state=permissive policy=targeted

      - name: check if java installed
        stat: path=/usr/bin/java
        register: has_java

      - name: install Java
        yum: name=java-1.8.0-openjdk
        when: has_java.stat.exists == false

      - name: install EPEL for CentOS
        yum: name=epel-release
        when: ansible_distribution == "CentOS" 

      - name: install EPEL for RHEL
        yum: name=https://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm 
        when: ansible_distribution == "RedHat"

      - name: install supervisord
        yum: name=supervisor

      - name: install bzip2
        yum: name=bzip2

      - name: install httpd
        yum: name=httpd

      - name: install jupyer pdf conversion dependencies
        yum: name=pandoc-pdf

      - name: configure base environment variables
        copy: src=config/environment.sh dest=/etc/profile.d/990environment.sh owner=root group=root

      # configure httpd
      - name: copy configuration
        template: src=config/httpd.conf.j2 dest=/etc/httpd/conf.d/pydatalab.conf owner=root group=root

      # Install spark      
      - name: download spark
        get_url: url=https://www.apache.org/dist/spark/spark-1.3.1/spark-1.3.1-bin-hadoop2.6.tgz dest=/root/spark-1.3.1-bin-hadoop2.6.tgz validate_certs=no force=no

      - name: extract spark
        unarchive: src=/root/spark-1.3.1-bin-hadoop2.6.tgz dest=/opt/ copy=no creates=/opt/spark-1.3.1-bin-hadoop2.6

      - name: fix issue with pyspark and numpy > 1.10
        copy: src=patches/pyspark.mllib.py dest=/opt/spark-1.3.1-bin-hadoop2.6/python/pyspark/mllib/__init__.py 

      # Install anaconda
      - name: download anaconda installer
        get_url: url=https://repo.continuum.io/archive/Anaconda-2.3.0-Linux-x86_64.sh dest=/root/Anaconda-2.3.0-Linux-x86_64.sh

      - name: install anaconda
        command: bash /root/Anaconda-2.3.0-Linux-x86_64.sh -f -p /opt/anaconda -b
        args:
            creates: /opt/anaconda/bin/python

      - name: register anaconda in path
        copy: src=config/anaconda-path.sh dest=/etc/profile.d/999anaconda.sh owner=root group=root

      - name: install python hdfs access library
        command: /opt/anaconda/bin/pip install hdfs
        args:
            creates: /opt/anaconda/lib/python2.7/site-packages/hdfs/

      - name: install gensim libraries
        command: /opt/anaconda/bin/conda install gensim -y
        args:
            creates: /opt/anaconda/lib/python2.7/site-packages/gensim

      - name: install scrapy
        command: /opt/anaconda/bin/conda install scrapy -y
        args:
            creates: /opt/anaconda/lib/python2.7/site-packages/scrapy

      - name: install python scrapyd 
        command: /opt/anaconda/bin/pip install scrapyd
        args:
            creates: /opt/anaconda/bin/scrapyd

      - name: install python geojson library
        command: /opt/anaconda/bin/pip install geojson
        args:
            creates: /opt/anaconda/lib/python2.7/site-packages/geojson/

      - name: install python geocoder library
        command: /opt/anaconda/bin/pip install geocoder
        args:
            creates: /opt/anaconda/lib/python2.7/site-packages/geocoder/

      - name: install python geopy library
        command: /opt/anaconda/bin/pip install geopy
        args:
            creates: /opt/anaconda/lib/python2.7/site-packages/geopy/

      - name: install python hive access library
        command: /opt/anaconda/bin/pip install pyhive
        args:
            creates: /opt/anaconda/lib/python2.7/site-packages/pyhive/

      - name: install ipython parallel
        command: /opt/anaconda/bin/conda install ipyparallel -y
        args:
            creates: /opt/anaconda/lib/python2.7/site-packages/ipyparallel/

      - name: install python-nvd3
        command: /opt/anaconda/bin/pip install python-nvd3
        args:
            creates: /opt/anaconda/lib/python2.7/site-packages/nvd3/

      - name: install python pygal visualization library
        command: /opt/anaconda/bin/pip install pygal
        args:
            creates: /opt/anaconda/lib/python2.7/site-packages/pygal

      - name: install python seaborn visualization library
        command: /opt/anaconda/bin/pip install seaborn
        args:
            creates: /opt/anaconda/lib/python2.7/site-packages/seaborn

      - name: install python textblob library
        command: /opt/anaconda/bin/pip install textblob
        args:
            creates: /opt/anaconda/lib/python2.7/site-packages/textblob/

      - name: install python vaderSentiment library
        command: /opt/anaconda/bin/pip install vaderSentiment
        args:
            creates: /opt/anaconda/lib/python2.7/site-packages/vaderSentiment/

      - name: install python mrjob library
        command: /opt/anaconda/bin/pip install mrjob
        args:
            creates: /opt/anaconda/lib/python2.7/site-packages/mrjob/


      # install python3 & jupyterhub
      - name: install python 3.4
        yum: name=python34-tools

      - name: install python 3.4 development headers
        yum: name=python34-devel

      - name: get pip3 script
        get_url: url=https://bootstrap.pypa.io/get-pip.py dest=/root/get-pip.py validate_certs=no force=no

      - name: get pip3
        command: /usr/bin/python3.4 /root/get-pip.py
        args:
            creates: /usr/bin/pip3

      - name: install npm
        yum: name=npm

      - name: install nodejs
        yum: name=nodejs

      - name: install nodejs configurable-http-proxy
        command: /usr/bin/npm install -g configurable-http-proxy
        args:
            creates: /usr/lib/node_modules/configurable-http-proxy

      - name: install jupyterhub
        command: /usr/bin/pip3 install jupyterhub
        args:
            creates: /usr/bin/jupyterhub

      - name: install jupyter for jupyterhub
        command: /usr/bin/pip3 install jupyter
        args:
            creates: /usr/bin/jupyter-notebook

      - name: install ipyparallel for jupyterhub
        command: /usr/bin/pip3 install ipyparallel
        args:
            creates: /usr/lib/python3.4/site-packages/ipyparallel

      # Install Jupyter, Bokeh, PySpark

      - name: install bokeh
        command: /opt/anaconda/bin/conda install bokeh==0.10.0 -y
        args:
            creates: /opt/anaconda/bin/bokeh-server

      - name: create jupyter config dir
        file: path=/usr/local/share/jupyter/custom state=directory owner=root group=root recurse=yes

      - name: create jupyter notebook dir
        file: path=/etc/skel/notebooks state=directory owner=root group=root recurse=yes

      - name: create user python modules dir
        file: path=/etc/skel/notebooks/python_modules/ state=directory owner=root group=root recurse=yes

      - name: add readme to modules dir
        copy: src=config/MODULES_README.txt dest=/etc/skel/notebooks/python_modules/ owner=root group=root

      - name: create dropzone for additional python modules
        file: path=/etc/skel/python_modules/ state=directory owner=root group=root recurse=yes

      - name: create dropzone for distribution-level python modules
        file: path=/opt/python_modules/ state=directory owner=root group=root recurse=yes

      - name: copy bundled libraries
        copy: src=libs/ dest=/opt/python_modules/ owner=root group=root

      - name: copy sample notebooks
        copy: src=notebooks/ dest=/etc/skel/notebooks/ owner=root group=root

      - name: copy jupyter config
        copy: src=config/jupyter_notebook_config.py dest=/usr/local/share/jupyter/jupyter_notebook_config.py owner=root group=root

      - name: copy javascript library loader
        copy: src=config/custom.js dest=/usr/local/share/jupyter/custom/custom.js owner=root group=root

      - name: copy css loader
        copy: src=config/custom.css dest=/usr/local/share/jupyter/custom/custom.css owner=root group=root

      - name: create jupyter global kernel dir
        file: path=/usr/local/share/jupyter/kernels state=directory owner=root group=root recurse=yes

      - name: create local pyspark kernel dir
        file: path=/usr/local/share/jupyter/kernels/pyspark state=directory owner=root group=root recurse=yes

      - name: register local pyspark kernel
        copy: src=config/kernels/pyspark-local.json dest=/usr/local/share/jupyter/kernels/pyspark/kernel.json owner=root group=root

      - name: check if server is HDP 2.3.0 with pyspark
        stat: path=/usr/hdp/2.3.0.0-2557/spark/python/pyspark/shell.py
        register: has_hdp


      - name: create HDP 2.3.0 pyspark dir
        file: path=/usr/local/share/jupyter/kernels/pyspark-hdp state=directory owner=root group=root recurse=yes
        when: has_hdp.stat.exists

      - name: register HDP 2.3.0 pyspark kernel
        copy: src=config/kernels/pyspark-hdp.json dest=/usr/local/share/jupyter/kernels/pyspark-hdp/kernel.json owner=root group=root
        when: has_hdp.stat.exists

      - name: install jupyterhub config
        copy: src=config/jupyterhub_config.py dest=/etc/jupyterhub_config.py owner=root group=root

      # create users
      - name: create pydatalab user
        user: name=pydatalab shell=/bin/bash password=$6$rounds=100000$PGsZEWuIC.PBXTmi$BKcG/cTfEZCZOroG7sBsXQaGM0Y.JnGdNzIPpjYUOUWi/a4dSeP3Cu/BAVtkYuOkoOmmsYjT9dQOjd42hTRmv0

      # start services on boot
      - name: create jupyter supervisor
        copy: src=config/supervisord.ini dest=/etc/supervisord.d/jupyter.ini owner=root group=root

      - name: start supervisord on boot
        service: name=supervisord state=restarted enabled=yes

      - name: start httpd on boot
        service: name=httpd state=restarted enabled=yes

      - name: check firewalld status
        command: /usr/bin/systemctl is-enabled firewalld
        register: firewalld_enabled

      - name: open firewall port 8888
        firewalld: port=8888/tcp permanent=true state=enabled immediate=yes
        when: firewalld_enabled.rc == 0

      - name: open firewall port 8000
        firewalld: port=8000/tcp permanent=true state=enabled immediate=yes
        when: firewalld_enabled.rc == 0

      - name: open firewall port 6800
        firewalld: port=6800/tcp permanent=true state=enabled immediate=yes
        when: firewalld_enabled.rc == 0

      - name: open firewall port 80
        firewalld: port=80/tcp permanent=true state=enabled immediate=yes
        when: firewalld_enabled.rc == 0

